package com.image.autocaption.service;

import com.image.autocaption.model.entity.ImageHistory;
import com.image.autocaption.utils.ImageUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.messages.UserMessage;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.ChatOptions;
import org.springframework.ai.content.Media;
import org.springframework.ai.ollama.OllamaChatModel;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;

import static com.image.autocaption.constant.ImageTypes.getSupportedContentTypes;

/**
 * The service layer abstraction that handles communication, prompting the LLM model for generation of list of captions.
 * Additionally, it stores the input images in AWS S3 bucket.
 */
@Service
public class AutoCaptionImageService {

    private final ChatClient chatClient;

    private static final Path IMAGES = Paths.get(System.getProperty("user.dir"), "images");

    private final AwsS3Service awsS3Service;

    private static final Logger LOGGER = LoggerFactory.getLogger(AutoCaptionImageService.class);

    private final ImageHistoryService imageHistoryService;

    public AutoCaptionImageService(OllamaChatModel ollamaChatModel,
                                   CacheManager cacheManager,
                                   KeyGenerator keyGenerator,
                                   AwsS3Service awsS3Service,
                                   ImageHistoryService imageHistoryService) {
        this.chatClient = ChatClient.create(ollamaChatModel);
        this.awsS3Service = awsS3Service;
        this.imageHistoryService = imageHistoryService;
    }

    /**
     * The method that creates a list of captions for the input image. Also, the results of this method can be cached in
     * an in-memory cache store.
     *
     * @param image     the byte array used as the cache key
     * @param imageFile the input image for which the captions are to be generated
     * @return a list of 3 captions generated by the LLM model for the requested image
     * @throws IOException
     */
    @Cacheable(value = "imageCache", keyGenerator = "cacheKeyGenerator")
    public List<String> createCaptions(byte[] image, MultipartFile imageFile, String model) throws Exception {

        if (!Files.exists(IMAGES)) {
            Files.createDirectories(IMAGES);
        }

        String filename = Path.of(imageFile.getOriginalFilename()).getFileName().toString();
        Path destinationFile = IMAGES.resolve(filename);
        // Save the file
        Files.copy(imageFile.getInputStream(), destinationFile, StandardCopyOption.REPLACE_EXISTING);
        String imgURL = awsS3Service.uploadFile(imageFile);
        LOGGER.info("Image uploaded successfully to AWS S3!");

        Resource resizedImage = ImageUtils.resizeIfNeeded(imageFile.getInputStream(), 512, 512);
        UserMessage userMessage = UserMessage.builder()
                .text("""
                        Please generate exactly three different descriptive captions for this image.
                        Return them as a numbered list. Do not generate any other sentence.
                        Just a list of three captions.""")
                .media(new Media(getSupportedContentTypes().get(imageFile.getContentType()), resizedImage))
                .build();

        ChatResponse response = chatClient
                .prompt()
                .messages(userMessage)
                .options(ChatOptions.builder().model(model).build())
                .call()
                .chatResponse();

        List<String> captions = List.of(response.getResult().getOutput().getText().split("\n"));
        ImageHistory imageHistory = imageHistoryService.createImageHistory(imgURL, captions);

        return captions;
    }


}
